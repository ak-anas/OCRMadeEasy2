var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/utils/execShellCommand.ts
import { exec } from "child_process";
function execShellCommand(command) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      exec(command, (err, stdout, sterr) => {
        if (err) {
          return reject(err);
        }
        return resolve(stdout || sterr);
      });
    });
  });
}

// src/utils/logger.ts
import cli from "cli-color";
var logger = {
  info: (message) => {
    const date = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    console.log(cli.white(`[${date}] `) + cli.green(message));
  },
  warn: (message) => {
    const date = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    console.log(cli.yellow(`[${date}] ${message}`));
  },
  error: (message, locale) => {
    const date = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    console.info(
      `${cli.white(`[${date}] `)} ${cli.red(message)} origin:${cli.white(
        locale || ""
      )}`
    );
  }
};

// src/lib/OcrMyPdf.ts
var OcrMyPdf = class {
  /**
   * Creates an instance of the OcrMyPdf class.
   * @param params  - Optional parameters for configuring the OcrMyPdf instance.
   */
  constructor(params) {
    Object.assign(this, params);
  }
  /**
   * Executes OCR on the PDF file.
   * @param params - Optional parameters for executing OCR.
   * @throws Throws an error if the execution fails.
   */
  execute(params) {
    return __async(this, null, function* () {
      logger.info("Executing OCR on the PDF file...");
      try {
        return yield this.executeOcrMyPdfInShell(params);
      } catch (error) {
        logger.error(
          `Failed to execute OCR on the PDF file: ${error.message}`,
          this.execute.name
        );
        throw error;
      } finally {
        logger.info("Finished executing OCR on the PDF file.");
      }
    });
  }
  /**
   * Executes a raw command in the shell.
   * @param args - The command to execute.
   * @throws Throws an error if the execution fails.
   * @returns The output of the command.
   */
  executeRaw(args) {
    return __async(this, null, function* () {
      logger.info("Executing a raw command in the shell...");
      try {
        return yield execShellCommand(args);
      } catch (error) {
        logger.error(
          `Failed to execute a raw command in the shell: ${error.message}`
        );
        throw error;
      } finally {
        logger.info("Finished executing a raw command in the shell.");
      }
    });
  }
  executeOcrMyPdfInShell(params) {
    return __async(this, null, function* () {
      try {
        const args = [].concat((params == null ? void 0 : params.args) || "").concat((this == null ? void 0 : this.args) || "");
        const inputPath = (params == null ? void 0 : params.inputPath) || this.inputPath;
        const outputPath = (params == null ? void 0 : params.outputPath) || this.outputPath;
        if (!inputPath || !outputPath)
          throw new Error("inputPath or outputPath is not defined!");
        yield execShellCommand(
          `ocrmypdf ${args == null ? void 0 : args.join(" ")} ${inputPath} ${outputPath}`
        );
        return {
          outputPath
        };
      } catch (error) {
        throw error;
      }
    });
  }
};
export {
  OcrMyPdf
};
//# sourceMappingURL=index.mjs.map