{"version":3,"sources":["../src/utils/execShellCommand.ts","../src/utils/logger.ts","../src/lib/OcrMyPdf.ts"],"sourcesContent":["import { exec } from \"node:child_process\";\n\n/**\n * @description Execute a shell command and return the output\n * @param command The command to execute\n * @returns The output of the command\n * @throws If the command fails\n */\nexport async function execShellCommand(command: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    exec(command, (err, stdout, sterr) => {\n      if (err) {\n        return reject(err);\n      }\n\n      return resolve(stdout || sterr);\n    });\n  });\n}\n\n/*\nimport { promisify } from \"node:util\";\nexport const execShellCommand = promisify(exec);\n*/\n","import cli from \"cli-color\";\n\nexport const logger = {\n  info: (message: string) => {\n    const date = new Date().toLocaleTimeString();\n    console.log(cli.white(`[${date}] `) + cli.green(message));\n  },\n  warn: (message: string) => {\n    const date = new Date().toLocaleTimeString();\n    console.log(cli.yellow(`[${date}] ${message}`));\n  },\n  error: (message: string, locale?: string) => {\n    const date = new Date().toLocaleTimeString();\n    console.info(\n      `${cli.white(`[${date}] `)} ${cli.red(message)} origin:${cli.white(\n        locale || \"\"\n      )}`\n    );\n  },\n};\n","import { execShellCommand, logger } from \"@/utils\";\nimport { OcrMyPdfMethodsParams, OcrMyPdfParams } from \"@/types\";\n\n/**\n * Represents a class for executing OCR on PDF files using the ocrmypdf command-line tool.\n */\nexport class OcrMyPdf {\n  private readonly args?: string[];\n  private readonly inputPath?: string;\n  private readonly outputPath?: string;\n\n  /**\n   * Creates an instance of the OcrMyPdf class.\n   * @param params  - Optional parameters for configuring the OcrMyPdf instance.\n   */\n  constructor(params?: OcrMyPdfParams) {\n    Object.assign(this, params);\n  }\n\n  /**\n   * Executes OCR on the PDF file.\n   * @param params - Optional parameters for executing OCR.\n   * @throws Throws an error if the execution fails.\n   */\n  async execute(params?: OcrMyPdfMethodsParams) {\n    logger.info(\"Executing OCR on the PDF file...\");\n\n    try {\n      return await this.executeOcrMyPdfInShell(params);\n    } catch (error) {\n      logger.error(\n        `Failed to execute OCR on the PDF file: ${error.message}`,\n        this.execute.name\n      );\n      throw error;\n    } finally {\n      logger.info(\"Finished executing OCR on the PDF file.\");\n    }\n  }\n\n  /**\n   * Executes a raw command in the shell.\n   * @param args - The command to execute.\n   * @throws Throws an error if the execution fails.\n   * @returns The output of the command.\n   */\n  async executeRaw(args: string) {\n    logger.info(\"Executing a raw command in the shell...\");\n    try {\n      return await execShellCommand(args);\n    } catch (error) {\n      logger.error(\n        `Failed to execute a raw command in the shell: ${error.message}`\n      );\n      throw error;\n    } finally {\n      logger.info(\"Finished executing a raw command in the shell.\");\n    }\n  }\n\n  private async executeOcrMyPdfInShell(params: OcrMyPdfMethodsParams) {\n    try {\n      const args = [].concat(params?.args || \"\").concat(this?.args || \"\");\n      const inputPath = params?.inputPath || this.inputPath;\n      const outputPath = params?.outputPath || this.outputPath;\n\n      if (!inputPath || !outputPath)\n        throw new Error(\"inputPath or outputPath is not defined!\");\n\n      await execShellCommand(\n        `ocrmypdf ${args?.join(\" \")} ${inputPath} ${outputPath}`\n      );\n\n      return {\n        outputPath,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,YAAY;AAQrB,SAAsB,iBAAiB,SAAkC;AAAA;AACvE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,SAAS,CAAC,KAAK,QAAQ,UAAU;AACpC,YAAI,KAAK;AACP,iBAAO,OAAO,GAAG;AAAA,QACnB;AAEA,eAAO,QAAQ,UAAU,KAAK;AAAA,MAChC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;;;AClBA,OAAO,SAAS;AAET,IAAM,SAAS;AAAA,EACpB,MAAM,CAAC,YAAoB;AACzB,UAAM,QAAO,oBAAI,KAAK,GAAE,mBAAmB;AAC3C,YAAQ,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,OAAO,CAAC;AAAA,EAC1D;AAAA,EACA,MAAM,CAAC,YAAoB;AACzB,UAAM,QAAO,oBAAI,KAAK,GAAE,mBAAmB;AAC3C,YAAQ,IAAI,IAAI,OAAO,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;AAAA,EAChD;AAAA,EACA,OAAO,CAAC,SAAiB,WAAoB;AAC3C,UAAM,QAAO,oBAAI,KAAK,GAAE,mBAAmB;AAC3C,YAAQ;AAAA,MACN,GAAG,IAAI,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,IAAI;AAAA,QAC3D,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;AACF;;;ACbO,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EASpB,YAAY,QAAyB;AACnC,WAAO,OAAO,MAAM,MAAM;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,QAAQ,QAAgC;AAAA;AAC5C,aAAO,KAAK,kCAAkC;AAE9C,UAAI;AACF,eAAO,MAAM,KAAK,uBAAuB,MAAM;AAAA,MACjD,SAAS,OAAO;AACd,eAAO;AAAA,UACL,0CAA0C,MAAM,OAAO;AAAA,UACvD,KAAK,QAAQ;AAAA,QACf;AACA,cAAM;AAAA,MACR,UAAE;AACA,eAAO,KAAK,yCAAyC;AAAA,MACvD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQM,WAAW,MAAc;AAAA;AAC7B,aAAO,KAAK,yCAAyC;AACrD,UAAI;AACF,eAAO,MAAM,iBAAiB,IAAI;AAAA,MACpC,SAAS,OAAO;AACd,eAAO;AAAA,UACL,iDAAiD,MAAM,OAAO;AAAA,QAChE;AACA,cAAM;AAAA,MACR,UAAE;AACA,eAAO,KAAK,gDAAgD;AAAA,MAC9D;AAAA,IACF;AAAA;AAAA,EAEc,uBAAuB,QAA+B;AAAA;AAClE,UAAI;AACF,cAAM,OAAO,CAAC,EAAE,QAAO,iCAAQ,SAAQ,EAAE,EAAE,QAAO,6BAAM,SAAQ,EAAE;AAClE,cAAM,aAAY,iCAAQ,cAAa,KAAK;AAC5C,cAAM,cAAa,iCAAQ,eAAc,KAAK;AAE9C,YAAI,CAAC,aAAa,CAAC;AACjB,gBAAM,IAAI,MAAM,yCAAyC;AAE3D,cAAM;AAAA,UACJ,YAAY,6BAAM,KAAK,IAAI,IAAI,SAAS,IAAI,UAAU;AAAA,QACxD;AAEA,eAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,SAAS,OAAO;AACd,cAAM;AAAA,MACR;AAAA,IACF;AAAA;AACF;","names":[]}